generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int         @id @default(autoincrement())
  uuid      String?     @unique @db.VarChar()
  email     String      @unique @db.VarChar()
  name      String?     @db.VarChar()
  lastname  String?     @db.VarChar()
  tax       String?     @db.VarChar()
  deletedAt   DateTime?   @db.Timestamp()
  password  Password?
  roles     UserRole[]
  comments  ReportedCompanyComment[]
  reviews   Review[]
}

model Password {
  id       Int    @id @default(autoincrement())
  password String @db.VarChar()
  userId   Int    @unique
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserRole {
  id     Int    @id @default(autoincrement())
  name   String @db.VarChar()
  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ReportedCompany {
  id          Int                      @id @default(autoincrement())
  name        String                   @db.VarChar()
  tax         String?                   @db.VarChar()
  description String?                  @db.Text()
  image       String?                  @db.VarChar()
  comments    ReportedCompanyComment[]
  reviews     Review[]
  deletedAt   DateTime?   @db.Timestamp()
}

model ReportedCompanyComment {
  id               Int    @id @default(autoincrement())
  description      String @db.Text()
  image            String? @db.VarChar()
  reportedCompanyId Int
  userId            Int
  deletedAt   DateTime?   @db.Timestamp()
  reportedCompany  ReportedCompany @relation(fields: [reportedCompanyId], references: [id], onDelete: Cascade)
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id                Int               @id @default(autoincrement())
  userId            Int
  reportedCompanyId Int
  review            String?
  deletedAt   DateTime?   @db.Timestamp()
  reviewDetails     ReviewDetail[]
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  reportedCompany   ReportedCompany  @relation(fields: [reportedCompanyId], references: [id], onDelete: Cascade)
}

model ReviewDetail {
  id                Int               @id @default(autoincrement())
  typeId            Int
  description       String?           @db.Text()
  score             Int
  reviewId      Int
  deletedAt         DateTime?        @db.Timestamp()
  review            Review       @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  type              SubType          @relation(fields: [typeId], references: [id], onDelete: Cascade)
}

model Type {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar()
  description String?   @db.Text()
  deletedAt   DateTime?   @db.Timestamp()
  subTypes    SubType[]
}

model SubType {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar()
  description String?       @db.Text()
  typeId      Int
  deletedAt   DateTime?   @db.Timestamp()
  type        Type          @relation(fields: [typeId], references: [id], onDelete: Cascade)
  reviewDetails ReviewDetail[]
}